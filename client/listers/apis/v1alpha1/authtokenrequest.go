/*
Copyright 2024 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "sigs.k8s.io/cluster-inventory-api/apis/v1alpha1"
)

// AuthTokenRequestLister helps list AuthTokenRequests.
// All objects returned here must be treated as read-only.
type AuthTokenRequestLister interface {
	// List lists all AuthTokenRequests in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AuthTokenRequest, err error)
	// AuthTokenRequests returns an object that can list and get AuthTokenRequests.
	AuthTokenRequests(namespace string) AuthTokenRequestNamespaceLister
	AuthTokenRequestListerExpansion
}

// authTokenRequestLister implements the AuthTokenRequestLister interface.
type authTokenRequestLister struct {
	indexer cache.Indexer
}

// NewAuthTokenRequestLister returns a new AuthTokenRequestLister.
func NewAuthTokenRequestLister(indexer cache.Indexer) AuthTokenRequestLister {
	return &authTokenRequestLister{indexer: indexer}
}

// List lists all AuthTokenRequests in the indexer.
func (s *authTokenRequestLister) List(selector labels.Selector) (ret []*v1alpha1.AuthTokenRequest, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AuthTokenRequest))
	})
	return ret, err
}

// AuthTokenRequests returns an object that can list and get AuthTokenRequests.
func (s *authTokenRequestLister) AuthTokenRequests(namespace string) AuthTokenRequestNamespaceLister {
	return authTokenRequestNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AuthTokenRequestNamespaceLister helps list and get AuthTokenRequests.
// All objects returned here must be treated as read-only.
type AuthTokenRequestNamespaceLister interface {
	// List lists all AuthTokenRequests in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AuthTokenRequest, err error)
	// Get retrieves the AuthTokenRequest from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AuthTokenRequest, error)
	AuthTokenRequestNamespaceListerExpansion
}

// authTokenRequestNamespaceLister implements the AuthTokenRequestNamespaceLister
// interface.
type authTokenRequestNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AuthTokenRequests in the indexer for a given namespace.
func (s authTokenRequestNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AuthTokenRequest, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AuthTokenRequest))
	})
	return ret, err
}

// Get retrieves the AuthTokenRequest from the indexer for a given namespace and name.
func (s authTokenRequestNamespaceLister) Get(name string) (*v1alpha1.AuthTokenRequest, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("authtokenrequest"), name)
	}
	return obj.(*v1alpha1.AuthTokenRequest), nil
}
